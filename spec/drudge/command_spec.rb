require 'spec_helper'

require 'drudge/command'

class Drudge

  describe Command do

    context "command execution" do

      describe "a command with no parameters" do 
        subject do
          Command.new(:verify, -> { puts "Verified." })
        end

        it "can be executed by calling the dispatch method" do
          expect_capture { subject.dispatch }.to eq("Verified.\n")
        end

        describe "#dispatch" do
          context "with no arguments"
          it "doesn't accept normal arguments" do
            expect { subject.dispatch(1) }.to raise_error(CommandArgumentError)
          end

          it "doesn't accept keyword arguments" do
            expect { subject.dispatch(greeting: "hello") }.to raise_error(CommandArgumentError)
          end
        end
      end

    end

    describe "a command with a couple of parameters" do 
      subject do
        Command.new(:greet,
                    [ Param.any(:greeter),
                      Param.any(:greeted)],
                      -> (greeter, greeted) { puts "#{greeter} says 'hello' to #{greeted}" })
      end

      describe "#dispatch" do
        it "accepts two arguments" do
          expect_capture { subject.dispatch("Santa", "Superman") }.to eq("Santa says 'hello' to Superman\n")
        end

        it "raises an error when called with a wrong number of arguments" do
          expect { subject.dispatch }.to raise_error(CommandArgumentError)
          expect { subject.dispatch("Santa") }.to raise_error(CommandArgumentError)
        end
      end
    end

    describe "a command with a a parameter and a keword parameter" do
      subject do
        Command.new(:greet,
                    [ Param.any(:message),
                      KeywordParam.any(:from) ],
                    -> (message, from: "someone") { puts "#{from} says #{message}"})
      end

      it "accepts a keyword argument" do
        expect_capture { subject.dispatch("Hello", from: "Santa") }.to eq("Santa says Hello\n")
      end

      it "uses the default value for the keyword parameter if the argument is not supplied" do
        expect_capture { subject.dispatch("Hello") }.to eq("someone says Hello\n")
      end

      it "doesn't accept other keyword arguments" do
        expect { subject.dispatch("Hello", to: "Santa") }.to raise_error
      end
    end

    describe "The command's description" do
      subject do
        Command.new(:verify, -> { puts "Verified." }, desc: "Verification")
      end

      its(:desc) { should eq "Verification" }
    end

    describe "Argument parsers" do
      describe "a command called 'greet' with one parameter" do
        subject(:command) do
          Command.new(:greet, [Param.any(:greeted)], -> { puts "Hello" })
        end

        describe "the argument parser generated by this command" do
          subject(:parser) do
            command.argument_parser.collated_arguments
          end

          it { should tokenize_and_parse(%w[Joe]).as({args: %w[Joe], keyword_args: {}}) }
          it { should_not tokenize_and_parse(%w[]) }
          it { should_not tokenize_and_parse(%w[Joe Green]) }
        end
      end

      describe "a comand called 'greet' with one parameter and two keyword parameters" do
        subject(:command) do
          Command.new(:greet, 
                      [Param.any(:message), 
                       KeywordParam.any(:from), 
                       KeywordParam.any(:to),
                       KeywordParam.any(:coming_from)],
                      -> (message, from: "someone", to: "else", coming_from: "bla") { puts "#{from} (coming from #{coming_from}) says #{message} to #{to}" })
        end

        describe "tghe argument parser for this command" do
          subject(:parser) do
            command.argument_parser.collated_arguments
          end

          it { should tokenize_and_parse(%w[hello]).as({args: %w[hello], keyword_args: {}}) }
          it { should tokenize_and_parse(%w[--from Santa --to Joe hello]).as({args: %w[hello], 
                                                                              keyword_args: {from: 'Santa', 
                                                                                             to: 'Joe'}}) }
          it { should tokenize_and_parse(%w[--to Joe --from Santa hello]).as({args: %w[hello], 
                                                                              keyword_args: {from: 'Santa', 
                                                                                             to: 'Joe'}}) }
          it { should tokenize_and_parse(%w[--to Joe hello]).as({args: %w[hello], 
                                                                 keyword_args: {to: 'Joe'}}) }
          it { should tokenize_and_parse(%w[--to Joe --coming-from Skopje hello]).as({args: %w[hello],
                                                                                      keyword_args: {to: 'Joe', 
                                                                                                     coming_from: 'Skopje'}}) }
          it { should tokenize_and_parse(%w[--from=Santa -- --to]).as({args: %w[--to], 
                                                                       keyword_args: {from: 'Santa'}}) }


          it { should_not tokenize_and_parse(%w[--from]) }
          it { should_not tokenize_and_parse(%w[--from Joe]) }
          it { should_not tokenize_and_parse(%w[--something Joe hello]) }
        end
      end
    end
  end
end
